
package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast_visitors.*;
import ast.node.*;


parser code {:

    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            
:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;

/* bogus terminal for unary precedence declaration */
terminal UMINUS;

non terminal Program program;
non terminal IStatement statement;
non terminal List<IStatement> statement_list;
non terminal MainClass main_class;
non terminal IExp exp;
non terminal BlockStatement block_statement;
non terminal IdLiteral identifier;


/* Declare precedence and associativity  here */
precedence left TIMES;
precedence right UMINUS;


/* Meggy Java Grammar */
start with program;

program ::=
    IMPORT:imp MEGGY SEMI main_class:mcl
        {:
            RESULT = new Program(imp.line, imp.pos, mcl, null);
        :}
        ;

main_class ::=
    CLASS identifier:name
        {:
            java.io.PrintStream sout
                = new java.io.PrintStream(
                    new java.io.FileOutputStream(name.getLexeme()+".java.s"));
            parser.out = new PrintWriter(sout);
            // Check filename is class name, if not exit with error message
            if (!(name.getLexeme()+".java").equals(parser.programName)){
                System.out.println(parser.programName);
            parser.report_fatal_error("File name does not match class name.",name);
            System.exit(1);
            }
        :}
        LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier:param RPAREN
        block_statement:blstm
        RBRACE
          {:
                RESULT = new MainClass(name.getLine(), name.getPos(), name.getLexeme(), param.getLexeme(), blstm);
          :}
    ;
exp ::=
    LPAREN:lpr BYTE RPAREN exp:e1
        {:
            RESULT = new ByteCast(lpr.line, lpr.pos, e1);
        :}
    |
    INT_LITERAL:intlt
        {:
            RESULT = new IntLiteral(intlt.line, intlt.pos, intlt.lexeme, intlt.value);
        :}
    |
    COLOR_LITERAL:color
        {:
            RESULT = new ColorLiteral(color.line, color.pos, color.lexeme, color.value);
        :}
    ;
statement_list ::=
    statement:s statement_list:list
        {:
            if (s!=null) { list.add(0,s); }
                RESULT = list;
        :}
    | /* epsilon */
        {:
                RESULT = new LinkedList<IStatement>();
        :}
    ;
statement ::=
    block_statement:s
        {:
            RESULT = s;
        :}
    |
    MEGGYSETPIXEL:msp LPAREN exp:e1 COMMA exp:e2 COMMA exp:e3 RPAREN SEMI
        {:
            RESULT = new MeggySetPixel(msp.line, msp.pos, e1, e2, e3);
        :}
    ;

block_statement ::=
    LBRACE:lb statement_list:list RBRACE
        {:
            RESULT = new BlockStatement(lb.line, lb.pos, list);
        :}
    ;
identifier ::=
    ID:name
        {:
            RESULT = new IdLiteral(name.line, name.pos, name.lexeme);
        :}
    ;
